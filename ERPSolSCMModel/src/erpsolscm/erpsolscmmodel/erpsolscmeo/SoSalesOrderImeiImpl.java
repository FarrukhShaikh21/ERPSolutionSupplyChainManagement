package erpsolscm.erpsolscmmodel.erpsolscmeo;

import java.math.BigDecimal;

import java.sql.CallableStatement;

import java.sql.SQLException;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Dec 18 15:31:33 PKT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SoSalesOrderImeiImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        SalesOrderImeiSno,
        Salesorderlineseq,
        Salesorderid,
        LineNo,
        ItemId,
        ItemRefId,
        ImeiNo,
        BoxNo,
        TempBoxNo,
        CompanyCode,
        LpAmount,
        SoSalesOrderLines;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SALESORDERIMEISNO = AttributesEnum.SalesOrderImeiSno.index();
    public static final int SALESORDERLINESEQ = AttributesEnum.Salesorderlineseq.index();
    public static final int SALESORDERID = AttributesEnum.Salesorderid.index();
    public static final int LINENO = AttributesEnum.LineNo.index();
    public static final int ITEMID = AttributesEnum.ItemId.index();
    public static final int ITEMREFID = AttributesEnum.ItemRefId.index();
    public static final int IMEINO = AttributesEnum.ImeiNo.index();
    public static final int BOXNO = AttributesEnum.BoxNo.index();
    public static final int TEMPBOXNO = AttributesEnum.TempBoxNo.index();
    public static final int COMPANYCODE = AttributesEnum.CompanyCode.index();
    public static final int LPAMOUNT = AttributesEnum.LpAmount.index();
    public static final int SOSALESORDERLINES = AttributesEnum.SoSalesOrderLines.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SoSalesOrderImeiImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("erpsolscm.erpsolscmmodel.erpsolscmeo.SoSalesOrderImei");
    }


    /**
     * Gets the attribute value for SalesOrderImeiSno, using the alias name SalesOrderImeiSno.
     * @return the value of SalesOrderImeiSno
     */
    public Long getSalesOrderImeiSno() {
        return (Long) getAttributeInternal(SALESORDERIMEISNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for SalesOrderImeiSno.
     * @param value value to set the SalesOrderImeiSno
     */
    public void setSalesOrderImeiSno(Long value) {
        setAttributeInternal(SALESORDERIMEISNO, value);
    }

    /**
     * Gets the attribute value for Salesorderlineseq, using the alias name Salesorderlineseq.
     * @return the value of Salesorderlineseq
     */
    public BigDecimal getSalesorderlineseq() {
        return (BigDecimal) getAttributeInternal(SALESORDERLINESEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for Salesorderlineseq.
     * @param value value to set the Salesorderlineseq
     */
    public void setSalesorderlineseq(BigDecimal value) {
        setAttributeInternal(SALESORDERLINESEQ, value);
    }

    /**
     * Gets the attribute value for Salesorderid, using the alias name Salesorderid.
     * @return the value of Salesorderid
     */
    public String getSalesorderid() {
        return (String) getAttributeInternal(SALESORDERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Salesorderid.
     * @param value value to set the Salesorderid
     */
    public void setSalesorderid(String value) {
        setAttributeInternal(SALESORDERID, value);
    }

    /**
     * Gets the attribute value for LineNo, using the alias name LineNo.
     * @return the value of LineNo
     */
    public Integer getLineNo() {
        return (Integer) getAttributeInternal(LINENO);
    }

    /**
     * Sets <code>value</code> as the attribute value for LineNo.
     * @param value value to set the LineNo
     */
    public void setLineNo(Integer value) {
        setAttributeInternal(LINENO, value);
    }

    /**
     * Gets the attribute value for ItemId, using the alias name ItemId.
     * @return the value of ItemId
     */
    public String getItemId() {
        return (String) getAttributeInternal(ITEMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemId.
     * @param value value to set the ItemId
     */
    public void setItemId(String value) {
        setAttributeInternal(ITEMID, value);
    }

    /**
     * Gets the attribute value for ItemRefId, using the alias name ItemRefId.
     * @return the value of ItemRefId
     */
    public String getItemRefId() {
        return (String) getAttributeInternal(ITEMREFID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemRefId.
     * @param value value to set the ItemRefId
     */
    public void setItemRefId(String value) {
        setAttributeInternal(ITEMREFID, value);
    }

    /**
     * Gets the attribute value for ImeiNo, using the alias name ImeiNo.
     * @return the value of ImeiNo
     */
    public String getImeiNo() {
        return (String) getAttributeInternal(IMEINO);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImeiNo.
     * @param value value to set the ImeiNo
     */
    public void setImeiNo(String value) {
        setAttributeInternal(IMEINO, value);
    }

    /**
     * Gets the attribute value for BoxNo, using the alias name BoxNo.
     * @return the value of BoxNo
     */
    public String getBoxNo() {
        return (String) getAttributeInternal(BOXNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for BoxNo.
     * @param value value to set the BoxNo
     */
    public void setBoxNo(String value) {
        setAttributeInternal(BOXNO, value);
    }

    /**
     * Gets the attribute value for TempBoxNo, using the alias name TempBoxNo.
     * @return the value of TempBoxNo
     */
    public String getTempBoxNo() {
        return (String) getAttributeInternal(TEMPBOXNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for TempBoxNo.
     * @param value value to set the TempBoxNo
     */
    public void setTempBoxNo(String value) {
        setAttributeInternal(TEMPBOXNO, value);
    }

    /**
     * Gets the attribute value for CompanyCode, using the alias name CompanyCode.
     * @return the value of CompanyCode
     */
    public String getCompanyCode() {
        return (String) getAttributeInternal(COMPANYCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CompanyCode.
     * @param value value to set the CompanyCode
     */
    public void setCompanyCode(String value) {
        setAttributeInternal(COMPANYCODE, value);
    }

    /**
     * Gets the attribute value for LpAmount, using the alias name LpAmount.
     * @return the value of LpAmount
     */
    public BigDecimal getLpAmount() {
        return (BigDecimal) getAttributeInternal(LPAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for LpAmount.
     * @param value value to set the LpAmount
     */
    public void setLpAmount(BigDecimal value) {
        setAttributeInternal(LPAMOUNT, value);
    }

    /**
     * @return the associated entity SoSalesOrderLinesImpl.
     */
    public SoSalesOrderLinesImpl getSoSalesOrderLines() {
        return (SoSalesOrderLinesImpl) getAttributeInternal(SOSALESORDERLINES);
    }

    /**
     * Sets <code>value</code> as the associated entity SoSalesOrderLinesImpl.
     */
    public void setSoSalesOrderLines(SoSalesOrderLinesImpl value) {
        setAttributeInternal(SOSALESORDERLINES, value);
    }


    /**
     * @param salesOrderImeiSno key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Long salesOrderImeiSno) {
        return new Key(new Object[] { salesOrderImeiSno });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
        if (operation==DML_DELETE) {
            CallableStatement cs=null;
            String ERPsolPLSQL="begin update item_imei_info set is_available='Y', customerid=null,sale_date=null ";
            ERPsolPLSQL+=" where IMEI="+getImeiNo()+"; end;";
            System.out.println(ERPsolPLSQL);
            cs=getDBTransaction().createCallableStatement(ERPsolPLSQL, getDBTransaction().DEFAULT);
            try {
                cs.executeUpdate();
            } catch (SQLException f) {
            }
            finally{
                try {
                    cs.close();
                } catch (SQLException f) {
                }
            }
        }
    }
}

