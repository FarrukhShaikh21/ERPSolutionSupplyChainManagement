package erpsolscm.erpsolscmmodel.erpsolscmeo;

import erpsolglob.erpsolglobmodel.erpsolglobclasses.ERPSolGlobClassModel;
import erpsolglob.erpsolglobmodel.erpsolglobclasses.ERPSolGlobalsEntityImpl;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jan 10 11:35:46 PKT 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AllCustomersSalePersonClImpl extends ERPSolGlobalsEntityImpl {
    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        setERPSolPKColumnName("Sno");
        setERPSolPKSeqName("all_customer_saleperson_cl_seq");
        super.create(attributeList);
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Sno,
        CustLineno,
        CreditLimit,
        ApprovedBy,
        ApprovedDate,
        EnterBy,
        EnterDate,
        SourceDocumentSno,
        SourceDocumentType,
        SourceDocumentAmount,
        IsUnsubmit,
        AllCustomerSalesperson;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SNO = AttributesEnum.Sno.index();
    public static final int CUSTLINENO = AttributesEnum.CustLineno.index();
    public static final int CREDITLIMIT = AttributesEnum.CreditLimit.index();
    public static final int APPROVEDBY = AttributesEnum.ApprovedBy.index();
    public static final int APPROVEDDATE = AttributesEnum.ApprovedDate.index();
    public static final int ENTERBY = AttributesEnum.EnterBy.index();
    public static final int ENTERDATE = AttributesEnum.EnterDate.index();
    public static final int SOURCEDOCUMENTSNO = AttributesEnum.SourceDocumentSno.index();
    public static final int SOURCEDOCUMENTTYPE = AttributesEnum.SourceDocumentType.index();
    public static final int SOURCEDOCUMENTAMOUNT = AttributesEnum.SourceDocumentAmount.index();
    public static final int ISUNSUBMIT = AttributesEnum.IsUnsubmit.index();
    public static final int ALLCUSTOMERSALESPERSON = AttributesEnum.AllCustomerSalesperson.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AllCustomersSalePersonClImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("erpsolscm.erpsolscmmodel.erpsolscmeo.AllCustomersSalePersonCl");
    }


    /**
     * Gets the attribute value for Sno, using the alias name Sno.
     * @return the value of Sno
     */
    public Integer getSno() {
        return (Integer) getAttributeInternal(SNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Sno.
     * @param value value to set the Sno
     */
    public void setSno(Integer value) {
        setAttributeInternal(SNO, value);
    }

    /**
     * Gets the attribute value for CustLineno, using the alias name CustLineno.
     * @return the value of CustLineno
     */
    public Integer getCustLineno() {
        return (Integer) getAttributeInternal(CUSTLINENO);
    }

    /**
     * Sets <code>value</code> as the attribute value for CustLineno.
     * @param value value to set the CustLineno
     */
    public void setCustLineno(Integer value) {
        setAttributeInternal(CUSTLINENO, value);
    }

    /**
     * Gets the attribute value for CreditLimit, using the alias name CreditLimit.
     * @return the value of CreditLimit
     */
    public BigDecimal getCreditLimit() {
        return (BigDecimal) getAttributeInternal(CREDITLIMIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreditLimit.
     * @param value value to set the CreditLimit
     */
    public void setCreditLimit(BigDecimal value) {
        setAttributeInternal(CREDITLIMIT, value);
    }

    /**
     * Gets the attribute value for ApprovedBy, using the alias name ApprovedBy.
     * @return the value of ApprovedBy
     */
    public String getApprovedBy() {
        return (String) getAttributeInternal(APPROVEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for ApprovedBy.
     * @param value value to set the ApprovedBy
     */
    public void setApprovedBy(String value) {
        setAttributeInternal(APPROVEDBY, value);
    }

    /**
     * Gets the attribute value for ApprovedDate, using the alias name ApprovedDate.
     * @return the value of ApprovedDate
     */
    public Date getApprovedDate() {
        return (Date) getAttributeInternal(APPROVEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ApprovedDate.
     * @param value value to set the ApprovedDate
     */
    public void setApprovedDate(Date value) {
        setAttributeInternal(APPROVEDDATE, value);
    }

    /**
     * Gets the attribute value for EnterBy, using the alias name EnterBy.
     * @return the value of EnterBy
     */
    public String getEnterBy() {
        return (String) getAttributeInternal(ENTERBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnterBy.
     * @param value value to set the EnterBy
     */
    public void setEnterBy(String value) {
        setAttributeInternal(ENTERBY, value);
    }

    /**
     * Gets the attribute value for EnterDate, using the alias name EnterDate.
     * @return the value of EnterDate
     */
    public Date getEnterDate() {
        return (Date) getAttributeInternal(ENTERDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnterDate.
     * @param value value to set the EnterDate
     */
    public void setEnterDate(Date value) {
        setAttributeInternal(ENTERDATE, value);
    }

    /**
     * Gets the attribute value for SourceDocumentSno, using the alias name SourceDocumentSno.
     * @return the value of SourceDocumentSno
     */
    public String getSourceDocumentSno() {
        return (String) getAttributeInternal(SOURCEDOCUMENTSNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for SourceDocumentSno.
     * @param value value to set the SourceDocumentSno
     */
    public void setSourceDocumentSno(String value) {
        setAttributeInternal(SOURCEDOCUMENTSNO, value);
    }

    /**
     * Gets the attribute value for SourceDocumentType, using the alias name SourceDocumentType.
     * @return the value of SourceDocumentType
     */
    public String getSourceDocumentType() {
        return (String) getAttributeInternal(SOURCEDOCUMENTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for SourceDocumentType.
     * @param value value to set the SourceDocumentType
     */
    public void setSourceDocumentType(String value) {
        setAttributeInternal(SOURCEDOCUMENTTYPE, value);
    }

    /**
     * Gets the attribute value for SourceDocumentAmount, using the alias name SourceDocumentAmount.
     * @return the value of SourceDocumentAmount
     */
    public BigDecimal getSourceDocumentAmount() {
        return (BigDecimal) getAttributeInternal(SOURCEDOCUMENTAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for SourceDocumentAmount.
     * @param value value to set the SourceDocumentAmount
     */
    public void setSourceDocumentAmount(BigDecimal value) {
        setAttributeInternal(SOURCEDOCUMENTAMOUNT, value);
    }

    /**
     * Gets the attribute value for IsUnsubmit, using the alias name IsUnsubmit.
     * @return the value of IsUnsubmit
     */
    public String getIsUnsubmit() {
        return (String) getAttributeInternal(ISUNSUBMIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for IsUnsubmit.
     * @param value value to set the IsUnsubmit
     */
    public void setIsUnsubmit(String value) {
        setAttributeInternal(ISUNSUBMIT, value);
    }

    /**
     * @return the associated entity AllCustomerSalespersonImpl.
     */
    public AllCustomerSalespersonImpl getAllCustomerSalesperson() {
        return (AllCustomerSalespersonImpl) getAttributeInternal(ALLCUSTOMERSALESPERSON);
    }

    /**
     * Sets <code>value</code> as the associated entity AllCustomerSalespersonImpl.
     */
    public void setAllCustomerSalesperson(AllCustomerSalespersonImpl value) {
        setAttributeInternal(ALLCUSTOMERSALESPERSON, value);
    }


    /**
     * @param sno key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer sno) {
        return new Key(new Object[] { sno });
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_INSERT) {

            populateAttributeAsChanged(ENTERBY, ERPSolGlobClassModel.doGetUserCode());
        }
        super.doDML(operation, e);
    }
}

